#+TITLE: [[https://github.com/hlissner/doom-emacs/][Doom Emacs]]
#+AUTHOR: chtc

My Doom Emacs config, nothing crazy here.

#+CAPTION: Screenshot of Doom Emacs
#+ATTR_HTML: :alt Screenshot of Doom Emacs :title Screenshot of Doom Emacs
[[../../../screenshots/emacs_thumb.png]]

#+CAPTION: Screenshot of Doom Emacs Dashboard
#+ATTR_HTML: :alt Screenshot of Doom Emacs Dashboard :title Screenshot of Doom Emacs Dashboard
[[../../../screenshots/emacs_dashboard_thumb.png]]

* Table Of Contents :toc:
- [[#lexical-binding][Lexical Binding]]
- [[#personal-info][Personal Info]]
- [[#theming][Theming]]
  - [[#fonts][Fonts]]
  - [[#theme][Theme]]
  - [[#dashboard][Dashboard]]
- [[#org][Org]]
  - [[#prettify-symbols-mode][Prettify Symbols Mode]]
  - [[#variables--hooks][Variables + Hooks]]
  - [[#headings][Headings]]
- [[#git-gutter][Git Gutter]]
- [[#centaur-tabs][Centaur Tabs]]
- [[#other][Other]]

* Lexical Binding
#+BEGIN_SRC elisp
;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-
#+END_SRC

* Personal Info
Some functionality uses this to identify you, e.g. GPG configuration, email clients, file templates and snippets.
#+BEGIN_SRC elisp
(setq user-full-name "chtc"
      user-mail-address "notnotcha0t1c@protonmail.com")
#+END_SRC

* Theming
** Fonts
Doom exposes five (optional) variables for controlling fonts in Doom.
Here are the three important ones:

- `doom-font'
- `doom-variable-pitch-font'
- `doom-big-font' -- used for `doom-big-font-mode'; use this for presentations or streaming.

They all accept either a font-spec, font string ("Input Mono-12"), or xlfd font string.
You generally only need these two:
#+BEGIN_SRC elisp :tangle no
(setq doom-font (font-spec :family "monospace" :size 12 :weight 'semi-light)
      doom-variable-pitch-font (font-spec :family "sans" :size 13))
#+END_SRC

#+BEGIN_SRC elisp
(setq doom-font (font-spec :family "monospace" :size 15)
      doom-variable-pitch-font (font-spec :family "Iosevka Aile" :size 15)
      doom-unicode-font (font-spec :family "monospace")
      doom-big-font (font-spec :family "monospace" :size 20))
#+END_SRC

** Theme
There are two ways to load a theme. Both assume the theme is installed and available.
You can either set `doom-theme' or manually load a theme with the `load-theme' function.
#+BEGIN_SRC elisp
(setq doom-theme 'doom-gruvbox)
(setq doom-themes-treemacs-theme "doom-colors")

;; Enable global solaire mode
(solaire-global-mode +1)
#+END_SRC

** Dashboard
#+BEGIN_SRC elisp
(setq fancy-splash-image "~/.dotfiles/emacs/.config/doom/linus.png")
#+END_SRC

* Org
** Prettify Symbols Mode
Setting symbols to be used by prettify-symbols-mode.
#+BEGIN_SRC elisp
(defun my/org/load-prettify-symbols () "Prettify org mode keywords"
  (interactive)
  (setq prettify-symbols-alist
    (mapcan (lambda (x) (list x (cons (upcase (car x)) (cdr x))))
          '(("[ ]"             . ?)
            ("[-]"             . ?)
            ("[X]"             . ?)
            ("#+begin_src"     . ?)
            ("#+end_src"       . ?)
            ("#+begin_example" . ?⌄)
            ("#+end_example"   . ?⌃)
            ("#+begin_quote"   . ?❝)
            ("#+end_quote"     . ?❞)
            ("#+title:"        . ?)
            ("#+date:"         . ?)
            ("#+author:"       . ?)
            ("#+name:"         . ?)
            ("#+caption:"      . ?)
            ("#+results:"      . ?)
            (":properties:"    . ?)
            (":logbook:"       . ?))))
  (prettify-symbols-mode 1))
#+END_SRC

** Variables + Hooks
Setting org mode related variables and adding hooks.
#+BEGIN_SRC elisp
(after! org
  (add-hook 'org-mode-hook 'my/org/load-prettify-symbols)
  (add-hook 'org-mode-hook 'mixed-pitch-mode 1)
  ;; If you use `org' and don't want your org files in the default location below, change `org-directory'.
  ;; It must be set before org loads!
  (setq org-directory "~/docs/org/"
        ;; Hide things like *text* /text/ etc.
        org-hide-emphasis-markers t
        ;; Change those 3 ugly dots
        org-ellipsis "  "))
#+END_SRC

** Headings
Changing heights of headings.
#+BEGIN_SRC elisp
(custom-set-faces
  '(org-level-1 ((t (:inherit outline-1 :height 1.2))))
  '(org-level-2 ((t (:inherit outline-2 :height 1.15))))
  '(org-level-3 ((t (:inherit outline-3 :height 1.1))))
  '(org-level-4 ((t (:inherit outline-4 :height 1.05))))
  '(org-level-5 ((t (:inherit outline-5 :height 1.0))))
)
#+END_SRC
* Git Gutter
#+BEGIN_SRC elisp
;; Enable global git gutter mode
(global-git-gutter-mode +1)

(custom-set-variables
 '(git-gutter:update-interval 7))
#+END_SRC

* Centaur Tabs
#+BEGIN_SRC elisp
(setq centaur-tabs-gray-out-icons 'buffer
      centaur-tabs-set-bar 'over)
#+END_SRC

* Other
#+BEGIN_SRC elisp
;; This determines the style of line numbers in effect. If set to `nil', line numbers are disabled.
;; For relative line numbers, set this to `relative'.
(setq display-line-numbers-type t)

;; Spaces > tabs
(setq-default indent-tabs-mode nil)
(setq-default tab-width 4)
(setq indent-line-function 'insert-tab)
#+END_SRC

Here are some additional functions/macros that could help you configure Doom:

- `load!' for loading external *.el files relative to this one
- `use-package!' for configuring packages
- `after!' for running code after a package has loaded
- `add-load-path!' for adding directories to the `load-path', relative to this file.
  Emacs searches the `load-path' when you load packages with `require' or `use-package'.
- `map!' for binding new keys

To get information about any of these functions/macros, move the cursor over the highlighted symbol at press 'K' (non-evil users must press 'C-c c k').
This will open documentation for it, including demos of how they are used.

You can also try 'gd' (or 'C-c c d') to jump to their definition and see how they are implemented.
