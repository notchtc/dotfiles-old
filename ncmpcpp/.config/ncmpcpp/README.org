#+TITLE: [[https://rybczak.net/ncmpcpp/][ncmpcpp]]
#+AUTHOR: chtc

#+BEGIN_CENTER
#+CAPTION: Screenshot of ncmpcpp
#+ATTR_HTML: :alt Screenshot of ncmpcpp :title Screenshot of ncmpcpp :width 775
#+ATTR_ORG: :width 775
[[../../../screenshots/ncmpcpp_thumb.png]]
#+END_CENTER

* Table Of Contents :toc:
- [[#dependencies][Dependencies]]
- [[#config][Config]]
  - [[#config-file][Config File]]
  - [[#notify-script][Notify Script]]

* Dependencies
| Dependency           | Why?                     |
|----------------------+--------------------------|
| mpd                  | ncmpcpp needs it to work |
| bash,mpc,notify-send | Used by notify script    |

* Config
** Config File
*** Directories
Directory for storing ncmpcpp related files.

Changing it is useful if you want to store everything somewhere else and provide command line setting for alternative location to config file which defines that while launching ncmpcpp.
#+BEGIN_SRC text :tangle ~/.dotfiles/ncmpcpp/.config/ncmpcpp/config
ncmpcpp_directory = "~/.config/ncmpcpp"
lyrics_directory = "~/music/lyrics"
#+END_SRC

*** Connection Settings
#+BEGIN_SRC text :tangle ~/.dotfiles/ncmpcpp/.config/ncmpcpp/config
mpd_host = localhost
mpd_port = 6600
mpd_connection_timeout = 5

# Needed for tag editor and file operations to work.
mpd_music_dir = "~/music"

mpd_crossfade_time = 5
#+END_SRC

*** Formatting
For a song format you can use:

%l - length
%f - filename
%D - directory
%a - artist
%A - album artist
%t - title
%b - album
%y - date
%n - track number (01/12 -> 01)
%N - full track info (01/12 -> 01/12)
%g - genre
%c - composer
%p - performer
%d - disc
%C - comment
%P - priority
$R - begin right alignment

If you want to make sure that a part of the format is displayed only when certain tags are present, you can archieve it by grouping them with brackets, e.g. '{%a - %t}' will be evaluated to 'ARTIST - TITLE' if both tags are present or '' otherwise.

It is also possible to define a list of alternatives by providing several groups and separating them with '|', e.g. '{%t}|{%f}' will be evaluated to 'TITLE' or 'FILENAME' if the former is not present.

Note: If you want to set limit on maximal length of a tag, just put the appropriate number between % and character that defines tag type, e.g. to make album take max. 20 terminal cells, use '%20b'.

In addition, formats support markers used for text attributes. They are followed by character '$'. After that you can put:

- 0 - default window color (discards all other colors)
- 1 - black
- 2 - red
- 3 - green
- 4 - yellow
- 5 - blue
- 6 - magenta
- 7 - cyan
- 8 - white
- 9 - end of current color
- b - bold text
- u - underline text
- r - reverse colors
- a - use alternative character set

If you don't want to use a non-color attribute anymore, just put it again, but this time insert character '/' between '$' and attribute character, e.g. {$b%t$/b}|{$r%f$/r} will display bolded title tag or filename with reversed colors.

If you want to use 256 colors and/or background colors in formats (the naming scheme is described below in section about color definitions), it can be done with the syntax $(COLOR), e.g. to set the artist tag to one of the non-standard colors and make it have yellow background, you need to write $(197_yellow)%a$(end).

Note that for standard colors this is interchangable with attributes listed above.

Note: colors can be nested.
#+BEGIN_SRC text :tangle ~/.dotfiles/ncmpcpp/.config/ncmpcpp/config
song_status_format = {{$3%a$9 -{ $5{%t}}|{%f}$9} | }$7%b$9
song_list_format = {%a} {$5%b$9} $7{%t}|{%f}$9
song_library_format = {$7%n$9 $8-$9} {%t}|{%f}

current_item_prefix = $7$b
current_item_suffix = $/b$(end)

now_playing_prefix = $3$b
now_playing_suffix = $/b$(end)
#+END_SRC

*** Column Settings
syntax of song columns list format is "column column etc."

- syntax for each column is:

(width of the column)[color of the column]{displayed tag}

Note: Width is by default in %, if you want a column to have fixed size, add 'f' after the value, e.g. (10)[white]{a} will be the column that take 10% of screen (so the real width will depend on actual screen size), whereas (10f)[white]{a} will take 10 terminal cells, no matter how wide the screen is.

- color is optional (if you want the default one, leave the field empty).

Note: You can give a column additional attributes by putting appropriate character after displayed tag character. Available attributes are:

- r - column will be right aligned
- E - if tag is empty, empty tag marker won't be displayed

You can also:

- give a column custom name by putting it after attributes, separated with character ':', e.g. {lr:Length} gives you right aligned column of lengths named "Length".

- define sequence of tags, that have to be displayed in case predecessor is empty in a way similar to the one in classic song format, i.e. using '|' character, e.g. {a|c|p:Owner} creates column named "Owner" that tries to display artist tag and then composer and performer if previous ones are not available.
#+BEGIN_SRC text :tangle ~/.dotfiles/ncmpcpp/.config/ncmpcpp/config
song_columns_list_format = (7f)[5]{l} (78)[]{t|f} (22)[3]{ar}
#+END_SRC

*** Colors
It is possible to set a background color by setting a color value "<foreground>_<background>", e.g. red_black will set foregound color to red and background color to black.

In addition, for terminals that support 256 colors it is possible to set one of them by using a number in range [1, 256] instead of color name, e.g. numerical value corresponding to red_black is 2_1.

To find out if the terminal supports 256 colors, run ncmpcpp and check out the bottom of the help screen for list of available colors and their numerical values.

What is more, there are two special values for the background color: "transparent" and "current".

The first one explicitly sets the background to be transparent, while the second one allows you to preserve current background color and change only the foreground one.

It's used implicitly when background color is not specified.

Moreover, it is possible to attach format information to selected color variables by appending to their end a colon followed by one or more format flags, e.g. black:b or red:ur. The following variables support this syntax: visualizer_color, color1, color2, empty_tag_color, volume_color, state_line_color, state_flags_color, progressbar_color, progressbar_elapsed_color, player_state_color, statusbar_time_color, alternative_ui_separator_color.

Note: due to technical limitations of older ncurses version, if 256 colors are used there is a possibility that you'll be able to use only colors with transparent background.
#+BEGIN_SRC text :tangle ~/.dotfiles/ncmpcpp/.config/ncmpcpp/config
colors_enabled = "yes"

empty_tag_color = 13

main_window_color = 3

color1 = 16

color2 = 15

statusbar_time_color = 7

progressbar_color = 1

player_state_color = 8

header_window_color = 3

#+END_SRC

*** Other
#+BEGIN_SRC text :tangle ~/.dotfiles/ncmpcpp/.config/ncmpcpp/config
## Note: Possible display modes: classic, columns.
browser_display_mode = "columns"
playlist_display_mode = "columns"
search_engine_display_mode = "columns"
playlist_editor_display_mode = "columns"

## Note: You can specify third character which will be used to build 'empty'
## part of progressbar.
progressbar_look = "─╼┈"

clock_display_seconds = "yes"

external_editor = "emacs"

## Note: set to yes if external editor is a console application.
use_console_editor = "no"

message_delay_time = 1

titles_visibility = "no"

autocenter_mode = "yes"
centered_cursor = "yes"

follow_now_playing_lyrics = "yes"
lyrics_fetchers = genius, musixmatch, sing365, metrolyrics, justsomelyrics, jahlyrics, plyrics, zeneszoveg, internet

enable_window_title = "no"

execute_on_song_change = "~/.config/ncmpcpp/notify"

## Sort library by album artist
media_library_primary_tag = "album_artist"

store_lyrics_in_song_dir = no
#+END_SRC

*** Visualizer
In order to make music visualizer work with MPD you need to use the fifo output.

Its format parameter has to be set to 44100:16:1 for mono visualization or 44100:16:2 for stereo visualization.

As an example here is the relevant section for mpd.conf:

#+BEGIN_SRC text
audio_output {
       type            "fifo"
       name            "Visualizer feed"
       path            "/tmp/mpd.fifo"
       format          "44100:16:2"
}
#+END_SRC

If the visualization on occasion diverges from the audio output, please set 'buffer_time' parameter of your audio output in mpd.conf to '100000' (100ms) or less to prevent that from happening.

Note: If you're using Mopidy, an address of a udpsink gstreamer's output is also accepted.

For example, the following section in mopidy.conf:

#+BEGIN_SRC text
[audio]
output = tee name=t ! queue ! autoaudiosink t.
       ! queue ! audio/x-raw,rate=44100,channels=2,format=S16LE
       ! udpsink host=localhost port=5555
#+END_SRC

will make localhost:5555 available as a source of data for the stereo visualizer.
#+BEGIN_SRC text :tangle ~/.dotfiles/ncmpcpp/.config/ncmpcpp/config
visualizer_data_source = "/tmp/mpd.fifo"
visualizer_output_name = "my_fifo"
visualizer_in_stereo = "yes"
visualizer_type = "ellipse"
visualizer_look = "▉▉"
#+END_SRC

** Notify Script
#+BEGIN_SRC shell :tangle ~/.dotfiles/ncmpcpp/.config/ncmpcpp/notify
#!/usr/bin/env bash
MUSIC_PATH="$HOME/music"
ART_PATH=$(dirname "$(mpc current -f '%file%' | head -n1)")

ART=("$MUSIC_PATH"/"$ART_PATH"/[C-c][O-o][V-v][E-e][R-r].*)
ARTIST=$(mpc current -f '%artist%')
TITLE=$(mpc current -f '%title%')
ALBUM=$(mpc current -f '%album%')

notify-send -u low "<b>$TITLE</b>" "$ARTIST - $ALBUM" -i "$ART"
#+END_SRC
